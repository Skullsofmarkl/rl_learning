"""
–§—É–Ω–∫—Ü–∏–∏ —Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –æ–±—É—á–µ–Ω–∏—è —Å –ø–æ–¥–∫—Ä–µ–ø–ª–µ–Ω–∏–µ–º.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∏ –∞–Ω–∞–ª–∏–∑–∞
–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ RL –≤ –∑–∞–¥–∞—á–µ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ –≤–æ–∂–¥–µ–Ω–∏—è.

–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:
- –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö DataFrame –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫
- –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å —Ä–µ–π—Ç–∏–Ω–≥–∞–º–∏ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö (CSV, JSON)
- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ –æ —Å–∏–ª—å–Ω—ã—Ö –∏ —Å–ª–∞–±—ã—Ö —Å—Ç–æ—Ä–æ–Ω–∞—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤

–§—É–Ω–∫—Ü–∏–∏ –º–æ–¥—É–ª—è:
- create_comparison_dataframe(): —Å–æ–∑–¥–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤
- create_performance_summary(): –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–≤–æ–¥–∫—É —Å —Ä–µ–π—Ç–∏–Ω–≥–∞–º–∏ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏
- save_comparison_results(): —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª—ã

–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑–∞:
- –ú–Ω–æ–≥–æ–º–µ—Ä–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –º–µ—Ç—Ä–∏–∫–∞–º
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ª—É—á—à–∏—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤
- –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤—ã–±–æ—Ä—É –∞–ª–≥–æ—Ä–∏—Ç–º–∞ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∑–∞–¥–∞—á
- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤
"""

import os
import numpy as np
import pandas as pd
from datetime import datetime


def create_comparison_dataframe(training_results, evaluation_results):
    """
    –°–æ–∑–¥–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π DataFrame –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ RL.
    
    –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—É—á–µ–Ω–∏—è –∏ –æ—Ü–µ–Ω–∫–∏ –≤—Å–µ—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –≤ –µ–¥–∏–Ω—É—é
    —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∏ –∞–Ω–∞–ª–∏–∑–∞. –í—ã—á–∏—Å–ª—è–µ—Ç –∫–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏:
    
    –ú–µ—Ç—Ä–∏–∫–∏ –æ–±—É—á–µ–Ω–∏—è:
    - –°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä–∞–¥–∞ –∑–∞ –≤—Å–µ —ç–ø–∏–∑–æ–¥—ã
    - –°–∫–æ—Ä–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è (–Ω–∞–≥—Ä–∞–¥–∞ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —ç–ø–∏–∑–æ–¥–∞—Ö)
    - –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥)
    - –£—Å–ø–µ—à–Ω–æ—Å—Ç—å (–ø—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω—ã—Ö —ç–ø–∏–∑–æ–¥–æ–≤)
    - –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ —ç–ø–∏–∑–æ–¥–æ–≤
    
    –ú–µ—Ç—Ä–∏–∫–∏ –æ—Ü–µ–Ω–∫–∏:
    - –°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä–∞–¥–∞ –≤ —Ç–µ—Å—Ç–æ–≤—ã—Ö —ç–ø–∏–∑–æ–¥–∞—Ö
    - –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –≤ —Ç–µ—Å—Ç–æ–≤—ã—Ö —ç–ø–∏–∑–æ–¥–∞—Ö
    - –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö —ç–ø–∏–∑–æ–¥–æ–≤
    
    –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏:
    - –û–±–æ–±—â–∞—é—â–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å (—Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É –æ–±—É—á–µ–Ω–∏–µ–º –∏ –æ—Ü–µ–Ω–∫–æ–π)
    
    Args:
        training_results (dict): —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—É—á–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞
        evaluation_results (dict): —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ü–µ–Ω–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–ª–≥–æ—Ä–∏—Ç–º–∞
        
    Returns:
        pd.DataFrame: —Ç–∞–±–ª–∏—Ü–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ –≤—Å–µ—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
    """
    comparison_data = []
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º
    for algorithm in ['DQN', 'PPO', 'SAC', 'A2C']:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–ª–≥–æ—Ä–∏—Ç–º–∞
            if (algorithm in training_results and algorithm in evaluation_results and
                training_results[algorithm] is not None and evaluation_results[algorithm] is not None):
                
                train_metrics = training_results[algorithm]
                eval_metrics = evaluation_results[algorithm]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–ª—é—á–µ–π –≤ –¥–∞–Ω–Ω—ã—Ö –æ–±—É—á–µ–Ω–∏—è
                if ('episode_rewards' not in train_metrics or 
                    'episode_lengths' not in train_metrics or
                    'episode_successes' not in train_metrics):
                    print(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º {algorithm}: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
                    continue
                
                # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                rewards = train_metrics['episode_rewards']
                lengths = train_metrics['episode_lengths']
                successes = train_metrics['episode_successes']
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø—É—Å—Ç—ã–µ
                if len(rewards) == 0 or len(lengths) == 0 or len(successes) == 0:
                    print(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º {algorithm}: –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ")
                    continue
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —ç–ø–∏–∑–æ–¥—ã (–Ω–æ –Ω–µ –±–æ–ª—å—à–µ —á–µ–º –µ—Å—Ç—å)
                last_episodes = min(20, len(rewards))
                final_rewards = rewards[-last_episodes:]
                final_lengths = lengths[-last_episodes:]
                final_successes = successes[-last_episodes:]
                
                # –í—ã—á–∏—Å–ª—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
                learning_speed = np.mean(final_rewards)      # –°–∫–æ—Ä–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è
                stability = np.std(final_rewards)            # –°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å (—á–µ–º –º–µ–Ω—å—à–µ, —Ç–µ–º –ª—É—á—à–µ)
                training_success_rate = np.mean(final_successes)  # –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –≤ –æ–±—É—á–µ–Ω–∏–∏
                eval_success_rate = eval_metrics.get('success_rate', 0.0)  # –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –≤ –æ—Ü–µ–Ω–∫–µ
                
                # –û–±–æ–±—â–∞—é—â–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å (—Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É –æ–±—É—á–µ–Ω–∏–µ–º –∏ –æ—Ü–µ–Ω–∫–æ–π)
                # –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ = –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ, –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ = –Ω–µ–¥–æ–æ–±—É—á–µ–Ω–∏–µ
                generalization = learning_speed - eval_metrics.get('mean_reward', 0.0)
                
                # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è DataFrame
                comparison_data.append({
                    '–ê–ª–≥–æ—Ä–∏—Ç–º': algorithm,
                    '–°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä–∞–¥–∞ (–æ–±—É—á–µ–Ω–∏–µ)': np.mean(rewards),           # –û–±—â–∞—è —Å—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä–∞–¥–∞
                    '–°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä–∞–¥–∞ (–æ—Ü–µ–Ω–∫–∞)': eval_metrics.get('mean_reward', 0.0),  # –ù–∞–≥—Ä–∞–¥–∞ –≤ —Ç–µ—Å—Ç–∞—Ö
                    '–°–∫–æ—Ä–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è': learning_speed,                      # –ù–∞–≥—Ä–∞–¥–∞ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —ç–ø–∏–∑–æ–¥–∞—Ö
                    '–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å': stability,                                # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
                    '–£—Å–ø–µ—à–Ω–æ—Å—Ç—å (–æ–±—É—á–µ–Ω–∏–µ)': training_success_rate,           # –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞ –≤ –æ–±—É—á–µ–Ω–∏–∏
                    '–£—Å–ø–µ—à–Ω–æ—Å—Ç—å (–æ—Ü–µ–Ω–∫–∞)': eval_success_rate,                 # –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞ –≤ —Ç–µ—Å—Ç–∞—Ö
                    '–°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ (–æ–±—É—á–µ–Ω–∏–µ)': np.mean(lengths),             # –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ —ç–ø–∏–∑–æ–¥–æ–≤
                    '–°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ (–æ—Ü–µ–Ω–∫–∞)': eval_metrics.get('mean_length', 0.0),  # –î–ª–∏–Ω–∞ –≤ —Ç–µ—Å—Ç–∞—Ö
                    '–û–±–æ–±—â–∞—é—â–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å': generalization                  # –†–∞–∑–Ω–∏—Ü–∞ –æ–±—É—á–µ–Ω–∏–µ-–æ—Ü–µ–Ω–∫–∞
                })
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è {algorithm}: {e}")
            continue
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∞–Ω–Ω—ã–µ
    if not comparison_data:
        print("–û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è!")
        return None
    
    return pd.DataFrame(comparison_data)


def create_performance_summary(comparison_df):
    """–°–æ–∑–¥–∞–µ—Ç —Å–≤–æ–¥–∫—É –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤."""
    
    print("=" * 80)
    print("–°–í–û–î–ö–ê –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–û–°–¢–ò –ê–õ–ì–û–†–ò–¢–ú–û–í RL")
    print("=" * 80)
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å—Ä–µ–¥–Ω–µ–π –Ω–∞–≥—Ä–∞–¥–µ –≤ –æ—Ü–µ–Ω–∫–µ
    sorted_df = comparison_df.sort_values('–°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä–∞–¥–∞ (–æ—Ü–µ–Ω–∫–∞)', ascending=False)
    
    print("\n–†–ï–ô–¢–ò–ù–ì –ê–õ–ì–û–†–ò–¢–ú–û–í (–ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ –æ—Ü–µ–Ω–∫–µ):")
    for i, (_, row) in enumerate(sorted_df.iterrows()):
        medal = "ü•á" if i == 0 else "ü•à" if i == 1 else "ü•â" if i == 2 else "4Ô∏è‚É£"
        print(f"{medal} {row['–ê–ª–≥–æ—Ä–∏—Ç–º']}: {row['–°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä–∞–¥–∞ (–æ—Ü–µ–Ω–∫–∞)']:.2f}")
    
    print("\n–î–ï–¢–ê–õ–¨–ù–´–ï –ú–ï–¢–†–ò–ö–ò:")
    print(sorted_df.to_string(index=False, float_format='%.3f'))
    
    # –ê–Ω–∞–ª–∏–∑ —Å–∏–ª—å–Ω—ã—Ö –∏ —Å–ª–∞–±—ã—Ö —Å—Ç–æ—Ä–æ–Ω
    print("\n–ê–ù–ê–õ–ò–ó –°–ò–õ–¨–ù–´–• –ò –°–õ–ê–ë–´–• –°–¢–û–†–û–ù:")
    
    best_algorithm = sorted_df.iloc[0]['–ê–ª–≥–æ—Ä–∏—Ç–º']
    print(f"\n–õ—É—á—à–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º: {best_algorithm}")
    
    # –ù–∞—Ö–æ–¥–∏–º –ª—É—á—à–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ø–æ –∫–∞–∂–¥–æ–π –º–µ—Ç—Ä–∏–∫–µ
    metrics_analysis = {
        '–°—Ä–µ–¥–Ω—è—è –Ω–∞–≥—Ä–∞–¥–∞ (–æ—Ü–µ–Ω–∫–∞)': '–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å',
        '–£—Å–ø–µ—à–Ω–æ—Å—Ç—å (–æ—Ü–µ–Ω–∫–∞)': '–Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å',
        '–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å': '—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è',
        '–û–±–æ–±—â–∞—é—â–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å': '—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∫ –æ–±–æ–±—â–µ–Ω–∏—é'
    }
    
    for metric, description in metrics_analysis.items():
        best_idx = comparison_df[metric].idxmax()
        best_value = comparison_df.loc[best_idx, metric]
        best_alg = comparison_df.loc[best_idx, '–ê–ª–≥–æ—Ä–∏—Ç–º']
        print(f"  ‚Ä¢ –õ—É—á—à–∏–π –ø–æ {description}: {best_alg} ({metric}: {best_value:.3f})")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    print("\n–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –í–´–ë–û–†–£ –ê–õ–ì–û–†–ò–¢–ú–ê:")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤
    algorithms = ['DQN', 'PPO', 'SAC', 'A2C']
    
    recommendations = {
        'DQN': '–í—ã–±–∏—Ä–∞–π—Ç–µ –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –∑–∞–¥–∞—á —Å –¥–∏—Å–∫—Ä–µ—Ç–Ω—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏, –∫–æ–≥–¥–∞ –≤–∞–∂–Ω–∞ –ø—Ä–æ—Å—Ç–æ—Ç–∞ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏',
        'PPO': '–í—ã–±–∏—Ä–∞–π—Ç–µ –¥–ª—è –∑–∞–¥–∞—á, –≥–¥–µ –≤–∞–∂–Ω–∞ —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å',
        'SAC': '–í—ã–±–∏—Ä–∞–π—Ç–µ –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á, –≥–¥–µ –≤–∞–∂–Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è –∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ',
        'A2C': '–í—ã–±–∏—Ä–∞–π—Ç–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø—Ä–æ—Ç–æ—Ç–∏–ø–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –ø–æ–Ω–∏–º–∞–Ω–∏—è –æ—Å–Ω–æ–≤ Actor-Critic –º–µ—Ç–æ–¥–æ–≤'
    }
    
    for algorithm in algorithms:
        if algorithm in comparison_df['–ê–ª–≥–æ—Ä–∏—Ç–º'].values:
            print(f"  ‚Ä¢ {algorithm}: {recommendations[algorithm]}")
    
    return sorted_df


def save_comparison_results(comparison_df, training_results, evaluation_results):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª—ã."""
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    os.makedirs("comparison_results", exist_ok=True)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º DataFrame
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    comparison_df.to_csv(f"comparison_results/comparison_{timestamp}.csv", index=False)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    results_summary = {
        'timestamp': timestamp,
        'comparison_data': comparison_df.to_dict('records'),
        'training_results': {k: {key: value.tolist() if isinstance(value, np.ndarray) else value 
                                for key, value in v.items()} 
                            for k, v in training_results.items()},
        'evaluation_results': {k: {key: value.tolist() if isinstance(value, np.ndarray) else value 
                                  for key, value in v.items()} 
                              for k, v in evaluation_results.items()}
    }
    
    import json
    with open(f"comparison_results/detailed_results_{timestamp}.json", 'w') as f:
        json.dump(results_summary, f, indent=2, default=str)
    
    print(f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫—É comparison_results/")
    print(f"  ‚Ä¢ comparison_{timestamp}.csv - —Å–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞")
    print(f"  ‚Ä¢ detailed_results_{timestamp}.json - –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã")
